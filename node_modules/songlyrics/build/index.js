"use strict";
/* eslint-disable no-await-in-loop */
/* eslint-disable complexity */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("./lib");
const util_1 = require("util");
const sources_1 = __importDefault(require("./sources"));
const cleanTitleRegexp = /\s(-.+|\[.+\]|\(.+\))/g;
const cleanTitle = (title) => title.replace(cleanTitleRegexp, '').trim();
const lyricsNotFound = () => {
    throw new Error('No lyrics found!');
};
const songlyrics = (title) => __awaiter(void 0, void 0, void 0, function* () {
    const queryFormat = '%s site:%s';
    const cleanedTitle = cleanTitle(title).toLowerCase();
    const query = (sourceUrl) => (0, util_1.format)(queryFormat, cleanedTitle, sourceUrl);
    for (const source of sources_1.default) {
        const sourceUrl = `${source.hostname}${source.path}`;
        const { noResults, results } = yield (0, lib_1.webSearch)(query(sourceUrl));
        if (noResults) {
            lyricsNotFound();
        }
        const [result] = results;
        if (result.hostname !== source.hostname || !result.url) {
            lyricsNotFound();
        }
        const response = yield (0, lib_1.request)(result.url);
        const lyrics = yield source.parse(response.body);
        return {
            lyrics: lyrics,
            source: {
                name: result.title.replace(/\s(\|.+)/g, ''),
                url: `https://${result.hostname}`,
                link: result.url,
            },
        };
    }
    lyricsNotFound();
});
exports.default = songlyrics;
